from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config import bot, OWNER_ID, CHANNEL_ID, MSK
from db.models import Users, Stats
from filters.is_owner import IsOwner
from filters.is_private import PrivateChatFilter
from handlers.user.tariff import tariff_manager

router = Router()


@router.callback_query(PrivateChatFilter(), F.data.startswith('buy_confirm_'))  # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def confirm_payment(cq: CallbackQuery, session: AsyncSession):
    tariff_type = cq.data.split('_')[2]
    user_id = cq.from_user.id

    user = (await session.execute(select(Users).where(Users.user_id == user_id))).scalar_one_or_none()

    if not user:
        return

    await bot.send_message(chat_id=cq.message.chat.id, text='üïí <i>–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—ë–∂...</i>',
                           parse_mode=ParseMode.HTML)  # –ó–∞–∫–∞–∑—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞
    await bot.delete_message(chat_id=cq.message.chat.id, message_id=cq.message.message_id)

    msk = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
    if tariff_type == 'month':
        tariff_text = "üåô –ú–µ—Å—è—Ü"
        tariff_price = "200"
    elif tariff_type == 'sixmonth':
        tariff_text = "üåï 6 –º–µ—Å—è—Ü–µ–≤"
        tariff_price = "900"
    else:
        tariff_text = "üåö 1 –≥–æ–¥"
        tariff_price = "1200"
    admin_message = (f"üí∏ <b>–£ –≤–∞—Å –ø–æ–∫—É–ø–∫–∞!</b> <u>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.</u>"
                     f"\n\n<blockquote><b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user.user_id}'>{user.fullname}"
                     f"</a></blockquote>"
                     f"\n<blockquote><b>üîã –¢–∞—Ä–∏—Ñ:</b> {tariff_text} ({tariff_price}‚ÇΩ)</blockquote>"
                     f"\n<blockquote>üï∞Ô∏è –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {msk} (–ú–°–ö)</blockquote>")

    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"admin_confirm_payment_{user_id}_{tariff_type}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω—è—é", callback_data=f"admin_cancel_payment_{user_id}_{tariff_type}")]
    ])

    await bot.send_message(chat_id=OWNER_ID, text=admin_message, parse_mode=ParseMode.HTML,
                           reply_markup=admin_kb, disable_web_page_preview=True)  # –í–ª–∞–¥–µ–ª—å—Ü—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ


@router.callback_query(PrivateChatFilter(), IsOwner(), F.data.startswith('admin_confirm_payment_'))  # –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç—ë–∂
async def admin_confirm_payment(cq: CallbackQuery, session: AsyncSession):
    user_id, tariff_type = cq.data.split('_')[3:5]
    user_id = int(user_id)

    user = (await session.execute(select(Users).where(Users.user_id == user_id))).scalar_one_or_none()
    if not user:
        return

    invite_link_obj = await bot.create_chat_invite_link(
        chat_id=CHANNEL_ID,
        member_limit=1
    )
    invite_link = invite_link_obj.invite_link  # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª

    current_date = datetime.now(MSK)

    if tariff_type == 'month':
        expiration_date = current_date + timedelta(days=31)
    elif tariff_type == 'sixmonth':
        expiration_date = current_date + timedelta(days=6 * 31)
    else:
        expiration_date = current_date + timedelta(days=365)

    user.time_sub = expiration_date  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    user.tariff = tariff_type  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ë–î
    tariff = tariff_manager.get_tariff(user.tariff)

    stats = (await session.execute(select(Stats).where(Stats.id == 1))).scalar_one_or_none()
    if not stats:
        stats = Stats()
        session.add(stats)
        await session.commit()

    stats.total_money += int(tariff.price[:-1])
    if tariff_type == 'month':
        stats.monthly_subs += 1
    elif tariff_type == 'sixmonth':
        stats.sixmonthly_subs += 1
    else:
        stats.yearly_subs += 1

    await session.commit()

    if user.link:  # –ï—Å–ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å—Å—ã–ª–∫–∞, —Ç–æ –æ–Ω –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–ª–∞—Ç—ë–∂
        await cq.message.edit_text(f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>"
                                   f"\n\n<blockquote><b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={user.user_id}'>"
                                   f"{user.fullname}</a></b></blockquote>"
                                   f"\n<blockquote><b>üîó –°—Å—ã–ª–∫–∞:</b> {user.link}</blockquote>",
                                   parse_mode=ParseMode.HTML, reply_markup=None)
        await bot.send_message(chat_id=user_id, text=f"üöÄ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ—â—ë {tariff.duration}!"
                                                     f" –ë—É–¥–µ–º —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –∏ –≤–ø—Ä–µ–¥—å.</b>", parse_mode=ParseMode.HTML)
        await session.commit()
        return

    user.link = invite_link
    await session.commit()

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ –±—ã–ª–æ, —á–µ–ª–æ–≤–µ–∫ –ø–æ–∫—É–ø–∞–µ—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑.
    await cq.message.edit_text(f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>"
                               f"\n\n<blockquote><b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={user.user_id}'>"
                               f"{user.fullname}</a></b></blockquote>"
                               f"\n<blockquote><b>üîó –í—ã–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞:</b> {user.link}</blockquote>",
                               parse_mode=ParseMode.HTML, reply_markup=None)

    await bot.send_message(chat_id=user_id,
                           text=f"üöÄ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {tariff.duration}!</b>"
                                f"\n\n<blockquote><i>üîó –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i> {invite_link}</blockquote>",
                           parse_mode=ParseMode.HTML)


@router.callback_query(PrivateChatFilter(), IsOwner(), F.data.startswith('admin_cancel_payment_'))  # –í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç—ë–∂
async def admin_cancel_payment(cq: CallbackQuery):
    user_id, tariff_type = cq.data.split('_')[3:5]
    user_id = int(user_id)

    await cq.message.edit_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', reply_markup=None)

    await bot.send_message(chat_id=user_id, text='‚ùå <b>–í–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>', parse_mode=ParseMode.HTML)
