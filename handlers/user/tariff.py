from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, CallbackQuery, InlineKeyboardButton

from filters.is_private import PrivateChatFilter

router = Router()


# –ö–ª–∞—Å—Å —Ç–∞—Ä–∏—Ñ–∞
class Tariff:
    def __init__(self, name: str, price: str, duration: str, callback_data):
        self.name = name
        self.price = price
        self.duration = duration
        self.callback_data = callback_data

    def get_payment_message(self):
        return (f'<blockquote><b>üí∞ –¶–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞:</b> <code>{self.price}</code></blockquote>'
                f'\n<blockquote><b>üîã –¢–∞—Ä–∏—Ñ:</b> <code>{self.duration}</code></blockquote>'
                f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî'
                f'\n<blockquote><b>‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ —Å—É–º–º—É –Ω–∞ –¥–∞–Ω–Ω—ã–µ'
                f' —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b></blockquote>'
                f'\n<blockquote>‚îñ –£–ö–ê–ñ–ò–¢–ï –°–í–û–ò –†–ï–ö–í–ò–ó–ò–¢–´</blockquote>'
                f'\n<blockquote><i>üîª –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É</i></blockquote>')


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ)
class TariffManager:
    def __init__(self):
        self.tariffs = {
            'month': Tariff(
                name='üåô –ú–µ—Å—è—Ü',
                price='200‚ÇΩ',
                duration='1 –º–µ—Å—è—Ü',
                callback_data='buy_confirm_month'
            ),
            'sixmonth': Tariff(
                name='üåï 6 –º–µ—Å—è—Ü–µ–≤',
                price='900‚ÇΩ',
                duration='6 –º–µ—Å—è—Ü–µ–≤',
                callback_data='buy_confirm_sixmonth'
            ),
            'year': Tariff(
                name='üåö 1 –≥–æ–¥',
                price='1200‚ÇΩ',
                duration='1 –≥–æ–¥',
                callback_data='buy_confirm_year'
            )
        }

    def get_tariff(self, tariff_name: str) -> Tariff:  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
        return self.tariffs.get(tariff_name)

    def get_tariff_selection_keyboard(self) -> InlineKeyboardMarkup:  # –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        inline_keyboard = []
        row = []
        for tariff_name, tariff in self.tariffs.items():
            button = InlineKeyboardButton(text=f'{tariff.name}', callback_data=f'buy_access_{tariff_name}')
            row.append(button)
            if len(row) == 2:  # –î–õ–ò–ù–ê –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ê–†–ò–§–û–í
                inline_keyboard.append(row)
                row = []

        if row:
            inline_keyboard.append(row)

        kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        return kb

    async def send_tariff_selection_message(self, cq: CallbackQuery):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ
        text = '<b>üí° –ü—Ä–æ—à—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:</b>'

        keyboard = self.get_tariff_selection_keyboard()

        await cq.message.edit_text(text=text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    @staticmethod
    async def send_payment_message(cq: CallbackQuery, tariff: Tariff):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª(-–∞)', callback_data=tariff.callback_data)],
            [InlineKeyboardButton(text='üîô –ö –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞', callback_data='back_to_tariff')]
        ]
        )

        text = tariff.get_payment_message()

        await cq.message.edit_text(text=text, reply_markup=kb, parse_mode=ParseMode.HTML)


tariff_manager = TariffManager()


@router.callback_query(PrivateChatFilter(), F.data == 'choosing_tariff')
async def choosing_tariff_cq(cq: CallbackQuery):
    await tariff_manager.send_tariff_selection_message(cq)


@router.callback_query(PrivateChatFilter(), F.data == 'back_to_tariff')
async def back_to_tariff_cq(cq: CallbackQuery):
    await tariff_manager.send_tariff_selection_message(cq)


@router.callback_query(PrivateChatFilter(), F.data.startswith('buy_access_'))
async def buy_access_cq(cq: CallbackQuery):
    tariff_name = cq.data.split('_')[2]
    tariff = tariff_manager.get_tariff(tariff_name)

    await tariff_manager.send_payment_message(cq, tariff)
