from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config import MSK, CHANNEL_ID, CHAT_ID, bot
from db.models import Users, async_session
from filters.is_private import PrivateChatFilter
from handlers.user.tariff import tariff_manager

router = Router()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscriptions():
    now = datetime.now(MSK)

    expiration_threshold = now + timedelta(days=1)

    async with async_session() as session:
        users_to_notify = (await session.execute(
            select(Users).where(Users.time_sub > now, Users.time_sub <= expiration_threshold)
        )).scalars().all()

        for user in users_to_notify:
            await send_subscription_expiration_notification(user)


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_subscription_expiration_notification(user: Users):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription_confirm"),
         InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="extend_subscription")]
    ])

    try:
        await bot.send_message(
            chat_id=user.user_id,
            text="üëã <b>–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>"
                 "\n\n<blockquote>üîì <b>–ß—Ç–æ–±—ã –∏ –¥–∞–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, <u>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                 "–ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</u></b></blockquote>",
            parse_mode=ParseMode.HTML,
            reply_markup=kb
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")


@router.callback_query(PrivateChatFilter(), F.data == "cancel_subscription_confirm")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
async def cancel_subscription_confirm(cq: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å", callback_data="cancel_subscription_deny"),
         InlineKeyboardButton(text="‚úÖ –î–∞, —É–≤–µ—Ä–µ–Ω(-–∞)", callback_data="cancel_subscription")]
    ])

    await cq.message.edit_text("‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ NSFW?</b>", reply_markup=kb,
                               parse_mode=ParseMode.HTML)


@router.callback_query(PrivateChatFilter(), F.data == "cancel_subscription_deny")  # –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É
async def cancel_subscription_deny(cq: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription_confirm"),
         InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="extend_subscription")]
    ])

    await cq.message.edit_text("‚ú® <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏.</b>", reply_markup=kb,
                               parse_mode=ParseMode.HTML)


@router.callback_query(PrivateChatFilter(), F.data == "extend_subscription")  # –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
async def extend_subscription(cq: CallbackQuery):
    await tariff_manager.send_tariff_selection_message(cq)


# –§—É–Ω–∫—Ü–∏—è –±–∞–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def ban_user(user_id: int, chat_id: int):
    try:
        await bot.ban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            until_date=0
        )
        await bot.unban_chat_member(
            chat_id=chat_id,
            user_id=user_id
        )
    except Exception as e:
        print(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ —Ä–µ—Å—É—Ä—Å–∞ {chat_id}: {e}")  # –ß–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ —á–∞—Ç–µ (–µ—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)


@router.callback_query(PrivateChatFilter(), F.data == "cancel_subscription")  # –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def cancel_subscription(cq: CallbackQuery, session: AsyncSession):
    user_id = cq.from_user.id

    user = (await session.execute(select(Users).where(Users.user_id == user_id))).scalar_one_or_none()
    if not user:
        return

    await ban_user(user_id, CHANNEL_ID)  # –ë–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ
    await ban_user(user_id, CHAT_ID)  # –ë–∞–Ω –≤ —á–∞—Ç–µ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    await bot.revoke_chat_invite_link(chat_id=CHANNEL_ID, invite_link=user.link)  # –°–±—Ä–æ—Å —Å—Å—ã–ª–∫–∏

    user.tariff = None
    user.time_sub = None
    user.link = None
    await session.commit()

    await cq.message.edit_text("üö© <b>–ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–∞—à–µ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏!</b>",
                               reply_markup=None, parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_expired_subscriptions():
    now = datetime.now(MSK)

    async with async_session() as session:
        expired_users = (await session.execute(select(Users).where(Users.time_sub <= now,
                                                                   Users.tariff != None))).scalars().all()
        for user in expired_users:
            await ban_user(user.user_id, CHANNEL_ID)
            await ban_user(user.user_id, CHAT_ID)
            await bot.revoke_chat_invite_link(chat_id=CHANNEL_ID, invite_link=user.link)

            user.tariff = None
            user.time_sub = None
            user.link = None
            await session.commit()

            await bot.send_message(
                chat_id=user.user_id,
                text="<b>üòî –£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>"
                     "\n\n<blockquote><b><u>üíô –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π!</u> –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —Å–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ "
                     "—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É</b> /start.</blockquote>",
                parse_mode=ParseMode.HTML
            )
