from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Stats
from filters.is_owner import IsOwner
from filters.is_private import PrivateChatFilter

router = Router()


@router.message(PrivateChatFilter(), IsOwner(), F.text.strip().lower().in_(['—Å—Ç–∞—Ç–∞', '—Å—Ç–∞—Ç', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']))  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
@router.message(PrivateChatFilter(), IsOwner(), Command('stats'))
async def statistics(message: Message, session: AsyncSession):
    stats = await session.scalar(select(Stats).where(Stats.id == 1))
    if not stats:
        return

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:</b>\n\n"
        f"<blockquote><b>üíµ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥ –ø–æ–ª—É—á–µ–Ω–æ:</b> <code>{stats.total_money}‚ÇΩ</code></blockquote>\n"
        f"<blockquote><b>üåô –ö—É–ø–ª–µ–Ω–æ –º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> <code>{stats.monthly_subs}</code></blockquote>\n"
        f"<blockquote><b>üåï –ö—É–ø–ª–µ–Ω–æ —à–µ—Å—Ç–∏–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> <code>{stats.sixmonthly_subs}</code></blockquote>\n"
        f"<blockquote><b>üåö –ö—É–ø–ª–µ–Ω–æ –≥–æ–¥–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> <code>{stats.yearly_subs}</code></blockquote>")

    await message.reply(text, parse_mode=ParseMode.HTML)
